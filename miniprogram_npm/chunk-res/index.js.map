{"version":3,"sources":["index.js","chunkRes.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var __TEMP__ = require('./chunkRes');Object.keys(__TEMP__).forEach(function(k) { if (k === \"default\" || k === \"__esModule\") return; Object.defineProperty(exports, k, { enumerable: true, configurable: true, get: function() { return __TEMP__[k]; } }); });\n","/**\n * 微信http流式响应处理\n * ```\n * // Example:\n * const chunkRes = ChunkRes()\n * // can`t use ref() to save task; it will lost task info\n * const task = wx.request({\n *  //...other params\n *  enableChunked: true,\n *  success: (res) => {\n *    const lastResTexts:string[] | undefined = chunkRes.onComplateReturn()\n *    // dosomething\n *   }\n * })\n * task.onChunkReceived(res => {\n *   const resTexts:string[] | undefined = chunkRes.onChunkReceivedReturn(res)\n *   // dosomething\n * })\n * ```\n * @returns\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var ChunkRes = exports.ChunkRes = () => {\n    /**\n     * 分段返回开始\n     */\n    const CHUNK_START = 'data:';\n    /**\n     * 分段返回中断\n     */\n    const SPLIT_WORD = '\\ndata:';\n    /**\n     * 保存返回文本\n     */\n    let lastText = '';\n    /**\n     * 保存解码异常的数据\n     */\n    let lastData = new Uint8Array();\n    /**\n     * 返回数据转文本\n     * @param res\n     * @returns\n     */\n    const getChunkText = (data) => {\n        // let data = res.data;\n        // console.log('getSeeResData:', data)\n        // 兼容处理,真机返回的的是 ArrayBuffer\n        if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        let text = data;\n        // Uint8Array转码\n        if (typeof data != 'string') {\n            // 兼容处理  微信小程序不支持TextEncoder/TextDecoder\n            try {\n                console.log('lastData', lastData);\n                text = decodeURIComponent(escape(String.fromCharCode(...lastData, ...data)));\n                lastData = new Uint8Array();\n            }\n            catch (error) {\n                text = '';\n                console.log('解码异常', data);\n                // Uint8Array 拼接\n                let swap = new Uint8Array(lastData.length + data.length);\n                swap.set(lastData, 0);\n                swap.set(data, lastData.length);\n                // lastData = lastData.concat(data)\n                lastData = swap;\n            }\n        }\n        return text;\n    };\n    /**\n     * 判断是否被拆分\n     * @param text\n     * @returns\n     */\n    const isStartString = (text) => {\n        return text.substring(0, 5) == CHUNK_START;\n    };\n    /**\n     * 对被合并的多段请求拆分\n     * @param text\n     */\n    const splitText = (text) => {\n        return text\n            .replaceAll(`\\n\\n${SPLIT_WORD}`, `\\n${SPLIT_WORD}`)\n            .replaceAll(`\\n${SPLIT_WORD}`, `${SPLIT_WORD}`)\n            .split(SPLIT_WORD)\n            .filter((str) => !!str);\n    };\n    /**\n     * 返回数据集\n     * @param res\n     * @param onSuccess\n     */\n    const onChunkReceived = (res, onSuccess) => {\n        let text = getChunkText(res);\n        console.log('onChunkReceived', text);\n        if (isStartString(text) && lastText) {\n            console.log('onSuccess', lastText);\n            onSuccess(splitText(removeStartText(lastText)));\n            // 存储本次的数据\n            lastText = text;\n        }\n        else {\n            lastText = lastText + text;\n        }\n    };\n    /**\n     * 返回数据集(返回数据)\n     * @param res\n     * @param onSuccess\n     */\n    const onChunkReceivedReturn = function (res) {\n        let text = getChunkText(res);\n        console.log('onChunkReceived', text);\n        if (isStartString(text) && lastText) {\n            // console.log(\"onSuccess\", lastText);\n            // onSuccess();\n            let swap = lastText;\n            // 存储本次的数据\n            lastText = text;\n            return splitText(removeStartText(swap));\n        }\n        else {\n            lastText = lastText + text;\n        }\n    };\n    /**\n     * 删除文本的开始的 data:\n     * @param text\n     * @returns\n     */\n    const removeStartText = (text) => {\n        if (text.substring(0, CHUNK_START.length) == CHUNK_START) {\n            return text.substring(CHUNK_START.length);\n        }\n        return text;\n    };\n    /**\n     * 请求完成调用一下\n     * @param onSuccess\n     */\n    const onComplate = (onSuccess) => {\n        if (lastText) {\n            onSuccess(splitText(removeStartText(lastText)));\n            lastText = '';\n        }\n    };\n    /**\n     * 请求完成调用一下(返回数据)\n     * @param onSuccess\n     */\n    const onComplateReturn = () => {\n        if (lastText) {\n            let swap = lastText;\n            lastText = '';\n            return splitText(removeStartText(swap));\n        }\n    };\n    return {\n        getChunkText,\n        onChunkReceived,\n        onChunkReceivedReturn,\n        onComplateReturn,\n        onComplate\n    };\n};\n"]}